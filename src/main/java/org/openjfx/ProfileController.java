package org.openjfx;import com.google.gson.Gson;import com.google.gson.reflect.TypeToken;import com.ydev00.model.thread.Thrd;import com.ydev00.model.user.User;import javafx.fxml.FXML;import javafx.fxml.Initializable;import javafx.scene.control.Label;import javafx.scene.control.ScrollPane;import javafx.scene.image.ImageView;import javafx.scene.layout.BorderPane;import javafx.scene.layout.FlowPane;import javafx.scene.layout.VBox;import org.apache.http.HttpResponse;import org.apache.http.util.EntityUtils;import org.openjfx.components.Sidebar;import org.openjfx.components.ThrdNode;import org.openjfx.util.ImageHandler;import org.openjfx.util.RequestHandler;import java.io.IOException;import java.io.InputStreamReader;import java.io.Reader;import java.lang.reflect.Type;import java.net.URL;import java.util.ArrayList;import java.util.List;import java.util.ResourceBundle;public class ProfileController implements Initializable {    @FXML    BorderPane profilePane;    @FXML    FlowPane topPane;    @FXML    Sidebar sidebar;    @FXML    ScrollPane scrollPane;    @FXML    Label usernameLabel;    @FXML    ImageView profilePicture;    @FXML    Label followersLabel;    @FXML    Label followeesLabel;    @FXML    VBox profileBox;    @FXML    FlowPane profilesPane;    ImageHandler imageHandler = new ImageHandler();    RequestHandler requestHandler = new RequestHandler();    List<Thrd> threads = new ArrayList<>();    List<User> followers = new ArrayList<>();    List<User> followees = new ArrayList<>();    @Override    public void initialize(URL url, ResourceBundle resourceBundle) {        System.out.println("loggedUser:"+App.loggedUser);        sidebar.prefWidthProperty().bind(profilePane.widthProperty().divide(7));        sidebar.prefHeightProperty().bind(profilePane.heightProperty().multiply(19).divide(20));        topPane.prefWidthProperty().bind(profilePane.widthProperty());        topPane.prefHeightProperty().bind(profilePane.heightProperty().divide(20));        try {            loadFollowers();            //loadFollowees();            //loadThreads();            //renderThreads();        } catch (IOException e) {            e.printStackTrace();        }        profilePicture.setImage(imageHandler.imageDataToImage(App.loggedUser.getProfilePic()));        usernameLabel.setText(App.loggedUser.getUsername());        followersLabel.setText(followers.size() + followers.size() == 1 ? "Seguidor": "Seguidores");        followeesLabel.setText(followees.size() + followees.size() == 1 ? "Seguidor": "Seguidores");    }    private void renderThreads() {        if (threads == null || threads.isEmpty()) {            return;        }        profileBox.getChildren().clear();        for (Thrd thrd : threads) {            profileBox.getChildren().add(new ThrdNode(thrd));        }    }    private void loadThreads() throws IOException {        Gson gson = new Gson();        HttpResponse response = requestHandler.sendRequest("user/"+App.loggedUser.getUsername()+"/t", "GET", new Object() , App.loggedUser);        if (response.getStatusLine().getStatusCode() != 200) {            System.out.println("Failed to load threads: " + EntityUtils.toString(response.getEntity()));            return;        }        Reader reader = new InputStreamReader(response.getEntity().getContent());        Type listType = new TypeToken<ArrayList<Thrd>>() {}.getType();        threads = gson.fromJson(reader, listType);    }    private void loadFollowers() throws IOException {        Gson gson = new Gson();        HttpResponse response = requestHandler.sendRequest("user/"+App.loggedUser.getUsername()+"/getFollowers", "GET", new Object(), App.loggedUser);        if (response.getStatusLine().getStatusCode() != 200) {            System.out.println("Failed to load followers: " + EntityUtils.toString(response.getEntity()));            return;        }        Reader reader = new InputStreamReader(response.getEntity().getContent());        Type listType = new TypeToken<ArrayList<User>>() {}.getType();        followers = gson.fromJson(reader, listType);    }    private void loadFollowees() throws IOException {        Gson gson = new Gson();        HttpResponse response = requestHandler.sendRequest("user/"+App.loggedUser.getUsername()+"/getFollowees", "GET", new Object(), App.loggedUser);        if (response.getStatusLine().getStatusCode() != 200) {            System.out.println("Failed to load followees: " + EntityUtils.toString(response.getEntity()));            return;        }        Reader reader = new InputStreamReader(response.getEntity().getContent());        Type listType = new TypeToken<ArrayList<User>>() {}.getType();        followees = gson.fromJson(reader, listType);    }}